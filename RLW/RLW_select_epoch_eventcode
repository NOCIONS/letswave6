function [out_header,out_data,message_string]=RLW_select_epoch_eventcode(header,data,varargin);
% RLW_select_epoch_eventcode
%
% Select epochdata based on a code event
%
% varargin
%'codes' {'L 1', 'L 2'}
%
%
% Author : 
% Emanuele Pasqualotto
% Institute of Neurosciences (IONS)
% Universite catholique de louvain (UCL)
% Belgium
% 
% Contact : andre.mouraux@uclouvain.be
% This function is part of Letswave 6
% See http://nocions.webnode.com/letswave for additional information
%

codes={};


%parse varagin
if isempty(varargin);
else
    %code
    a=find(strcmpi(varargin,'codes'));
    if isempty(a);
    else
        codes=varargin{a+1};
    end;
end;

%init message_string
message_string={};
message_string{1}='Select epoch based on trigger.';

%prepare out_header
out_header=header;

%find epochs with fieldname and non-empty numerical fieldvalues
ok_i=1;
ok_idx=[];

for jj=1:length(codes)
    for ii=1:length(header.events);
        if strcmp(header.events(ii).code,codes(jj))
            ok_idx(ok_i)=header.events(ii).epoch;
            ok_i=ok_i+1;
        end
    end;
end;
message_string{end+1}=['Found ' num2str(length(ok_idx)) ' epochs meeting criterion.'];

if ok_idx
    %data
    out_data=data(ok_idx,:,:,:,:,:);

    %adjust number of epochs
    out_header.datasize(1)=length(ok_idx);

    %fix events
    if isfield(out_header,'events');
        events_to_delete=[];
        events=out_header.events;
        for i=1:length(events);
            a=find(ok_idx==events(i).epoch);
            if isempty(a);
                events_to_delete(end+1)=i;
            else
                events(i).epoch=a(1);
            end;
        end;
        events(events_to_delete)=[];
        out_header.events=events;
    end
else
    message_string{end+1}=['No epoch matches criteria. Operation termined with no change.'];
    out_data=data;
end
end
